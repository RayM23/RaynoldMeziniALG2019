#include <iostream>
#include <fstream>
#include <string>
using namespace std;

int main() {
cout<<"Fjalor me peme te balancuar."<<endl;
cout<<"Jepni emrin e skedarit"<<endl;

string emriFilet, eteee;
cin>>emriFilet;
ifstream input;
input.open(emriFilet);

tree*rrenja = new tree;
rrenja = NULL;

if(!input.is_open()){ 
cout<<"Gabim"<<endl;
}
else{
while(input>>eteee){
if(!existonP(rrenja,eteee)){ 
rrenja=add(rrenja,eteee);
}
}
}
print(rrenja);
return 0;
}

bool existonP(tree*rrenja, string s){
if(rrenja==NULL)return false;
if(rrenja->word==s)return true;

bool a=existonP(rrenja->left,s);
if(a)return true;

bool b=existonP(rrenja->right,s);
return b;
}

int height(tree* p){  
    if (p==NULL)return 0;
    return p->height;
}  


int max(int a, int b){  
    return (a > b)? a : b;  
}  


tree* rrDjathtas(tree *y){  
    tree* x = y->left;  
    tree* T2 = x->right;  
    
    x->right = y;  
    y->left = T2;  
  
    y->height = max(height(y->left), 
                    height(y->right)) + 1;  
    x->height = max(height(x->left), 
                    height(x->right)) + 1;  
  
    return x;  
}  
  
tree* rrMajtas(tree* x){  
    tree* y = x->right;  
    tree* T2 = y->left;  
    
    y->left = x;  
    x->right = T2;  
  
    x->height = max(height(x->left),     
                    height(x->right)) + 1;  
    y->height = max(height(y->left),  
                    height(y->right)) + 1;  
  
    return y;  
}  
  
int getBalance(tree* p){  
    if (p == NULL)return 0;  
    return height(p->left) - height(p->right);  
}  
  
tree* shto(tree* rrenja, string s){ 

    tree*p = new tree; 
    p->word = s;
    p->left = NULL;  
    p->right = NULL;  
    p->height = 1; //lartesia = 1 ne fillim si gjethe
    
  
    if (rrenja == NULL)return p;  
  
    if (s < rrenja->word){ 
        rrenja->left = add(rrenja->left, s); 
}
    else{
        rrenja->right = add(rrenja->right, s);  
    }
    
    rrenja->height = 1 + max(height(rrenja->left),  
                        height(rrenja->right));  
  
    int balance = getBalance(rrenja);  
  
    if (balance > 1 && s < rrenja->left->word)  
        return rrDjathtas(rrenja);  
  
    if (balance < -1 && s > rrenja->right->word)  
        return rrMajtas(rrenja);  
  
    if (balance > 1 && s > rrenja->left->word){  
        rrenja->left = rrMajtas(rrenja->left);  
        return rrDjathtas(rrenja);  
    }  
  
    if (balance < -1 && s < rrenja->right->word){  
        rrenja->right = rrDjathtas(rrenja->right);  
        return rrMajtas(rrenja);  
    }  
  
    return rrenja;
}  

void print(tree*rrenja){
if(rrenja==NULL)return;
print(rrenja->left);
cout<<rrenja->word<<endl;
print(rrenja->right);
}

    return root;
}  

void print(tree*root){
if(root==NULL)return;
print(root->left);
cout<<root->word<<endl;
print(root->right);
}
